# BrainBytes CI/CD System Architecture

## Overview
[The BrainBytes project is a containerized AI tutoring chat platform that integrates a modern frontend, an AI-powered backend (Groq), and a MongoDB database. This document outlines the architecture of the CI/CD pipeline, cloud deployment, and component interactions using GitHub Actions and Render.]

## Architecture Diagram

```mermaid
---
config:
  theme: base
  layout: fixed
---
flowchart TD
 subgraph subGraph0["Developer Workflow"]
        A1["üíª Code Commit GitHub"]
        A2["üîÄ Branch: main / dev / feature"]
  end
 subgraph subGraph1["GitHub Actions CI/CD"]
        B1["‚úÖ Lint & Test lint-test.yml"]
        B2["üê≥ Docker Build frontend/backend"]
        B3["üöÄ Deploy to Render render-deploy@v1.4.5"]
  end
 subgraph subGraph2["Render Deployment"]
        C1["üåê Frontend Service\nbrainbytes-frontend.onrender.com"]
        C2["üß† Backend Service\nbrainbytes-backend.onrender.com"]
  end
 subgraph subGraph3["External Services"]
        D1["üóÉÔ∏è MongoDB Atlas"]
        D2["ü§ñ Groq AI API"]
  end
    A1 --> A2
    A2 --> B1
    B1 --> B2
    B2 --> B3
    B3 --> C1 & C2
    C2 --> D1 & D2
    style A1 fill:#f9f,stroke:#333,stroke-width:1px
    style A2 fill:#fdfd96,stroke:#333
    style B1 fill:#DFF2BF,stroke:#333
    style B2 fill:#BDE5F8,stroke:#333
    style B3 fill:#FFC0CB,stroke:#333
    style C1 fill:#c5f8d5,stroke:#333
    style C2 fill:#c5f8d5,stroke:#333
    style D1 fill:#FFDEAD,stroke:#333
    style D2 fill:#FFDEAD,stroke:#333
```

## Components
### 1. Source Control
- Repository: https://github.com/catedeguzman-it/brain_bytes.git
- Branch Structure:
  - main: Stable, production-ready code
  - dev: Feature staging and integration
  - feature/*: Individual developer branches
- Protection Rules:
  - Required PR reviews before merge
  - Status checks for build and tests
  - Branch deletion rules after merge

### 2. CI/CD Pipeline
- Platform: GitHub Actions
- Workflow Files:
  - .github/workflows/main.yml
  - .github/workflows/deploy.yml

- Pipeline Stages:
```mermaid
flowchart TD
  A[üß™ Linting & Tests\n- Runs Prettier\n- Runs ESLint\n- Runs integration tests] --> B[üê≥ Docker Build\n- Build frontend container\n- Build backend container]
  B --> C[üöÄ Deployment\n- Uses render-deploy@v1.4.5\n- RENDER_SERVICE_ID + RENDER_API_KEY]
  C --> D[üîç Post-Deployment Check\n- Verifies health check endpoints]

  style A fill:#DFF2BF,stroke:#333
  style B fill:#BDE5F8,stroke:#333
  style C fill:#FFDAB9,stroke:#333
  style D fill:#E0BBE4,stroke:#333
```

### 3. Cloud Infrastructure
Cloud Provider: Render.com (PaaS)

Resources:
- Frontend Web Service: brainbytes-frontend-<id>.onrender.com
- Backend Web Service: brainbytes-backend-<id>.onrender.com
- MongoDB Atlas: Cloud-hosted NoSQL database

Networking:
- All services are exposed via HTTPS
- Internal API traffic secured via environment variables and auth headers
- Environment-specific configurations are handled via Render's Dashboard

## Component Interactions
```mermaid
flowchart TD
  subgraph Frontend [üåê Frontend]
    FE[User Interface\n(brainbytes-frontend)]
  end

  subgraph Backend [üß† Backend]
    BE[API Server\n(brainbytes-backend)]
    DB[(MongoDB Atlas)]
    AI[(Groq API)]
  end

  subgraph DevOps [‚öôÔ∏è GitHub Actions]
    CI[Commit to main branch]
    GH[GitHub Actions Workflow]
    ENV[Secrets:\nMONGO_URI,\nGROQ_API_KEY,\nRENDER_API_KEY]
    DEPLOY[Deploy to Render\n(render-deploy@v1.4.5)]
  end

  FE -- REST API Calls --> BE
  BE --> DB
  BE --> AI

  CI --> GH --> DEPLOY
  GH --> ENV
  DEPLOY --> FE
  DEPLOY --> BE

  style FE fill:#BDE5F8,stroke:#333
  style BE fill:#D0F0C0,stroke:#333
  style DB fill:#FDFD96,stroke:#333
  style AI fill:#FFDEAD,stroke:#333
  style CI fill:#FFC0CB,stroke:#333
  style GH fill:#FFB347,stroke:#333
  style ENV fill:#E6E6FA,stroke:#333
  style DEPLOY fill:#C1C8E4,stroke:#333
```

## Security Considerations
- All secrets managed via GitHub Encrypted Secrets
- Render services use auto HTTPS and have access restrictions
- MongoDB Atlas IP whitelist ensures only Render services can connect
- CI/CD includes vulnerability scans and code linting
- API routes protected with basic auth and request validation
