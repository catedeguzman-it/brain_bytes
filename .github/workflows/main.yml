name: BrainBytes CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: üßº Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: ‚ôªÔ∏è Cache frontend node_modules
        uses: actions/cache@v3
        with:
          path: brainbytes-multi-container/frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('brainbytes-multi-container/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: ‚ôªÔ∏è Cache backend node_modules
        uses: actions/cache@v3
        with:
          path: brainbytes-multi-container/backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('brainbytes-multi-container/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: üì¶ Install frontend deps
        working-directory: brainbytes-multi-container/frontend
        run: npm install

      - name: üîç Lint frontend
        working-directory: brainbytes-multi-container/frontend
        run: npm run lint || echo "‚ö†Ô∏è Frontend lint failed"

      - name: üì¶ Install backend deps
        working-directory: brainbytes-multi-container/backend
        run: npm install

      - name: üîç Lint backend
        working-directory: brainbytes-multi-container/backend
        run: npm run lint || echo "‚ö†Ô∏è Backend lint failed"

  test:
    name: üß™ Unit Tests
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: ‚ôªÔ∏è Restore frontend node_modules
        uses: actions/cache@v3
        with:
          path: brainbytes-multi-container/frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('brainbytes-multi-container/frontend/package-lock.json') }}

      - name: üì¶ Install frontend deps
        working-directory: brainbytes-multi-container/frontend
        run: npm install

      - name: üß™ Frontend Tests
        working-directory: brainbytes-multi-container/frontend
        run: |
          if [ -f "package.json" ] && grep -q "\"test\":" package.json; then
            npm test || echo "‚ùå Frontend tests failed"
          else
            echo "‚ö†Ô∏è No frontend tests defined. Skipping..."
          fi

      - name: ‚ôªÔ∏è Restore backend node_modules
        uses: actions/cache@v3
        with:
          path: brainbytes-multi-container/backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('brainbytes-multi-container/backend/package-lock.json') }}

      - name: üì¶ Install backend deps
        working-directory: brainbytes-multi-container/backend
        run: npm install

      - name: üß™ Backend Tests
        working-directory: brainbytes-multi-container/backend
        run: |
          if [ -f "package.json" ] && grep -q "\"test\":" package.json; then
            npm test || echo "‚ùå Backend tests failed"
          else
            echo "‚ö†Ô∏è No backend tests defined. Skipping..."
          fi

  integration-test:
    name: üîÅ Integration Test with Docker Compose
    needs: test
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:4.4
        ports:
          - 27018:27017

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: ‚ôªÔ∏è Restore frontend node_modules
        uses: actions/cache@v3
        with:
          path: brainbytes-multi-container/frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('brainbytes-multi-container/frontend/package-lock.json') }}

      - name: ‚ôªÔ∏è Cache Next.js build cache
        uses: actions/cache@v3
        with:
          path: brainbytes-multi-container/frontend/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('brainbytes-multi-container/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: ‚öôÔ∏è Build frontend
        working-directory: brainbytes-multi-container/frontend
        run: |
          npm install
          npm run build || echo "‚ö†Ô∏è No frontend build script defined"

      - name: ‚ôªÔ∏è Restore backend node_modules
        uses: actions/cache@v3
        with:
          path: brainbytes-multi-container/backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('brainbytes-multi-container/backend/package-lock.json') }}

      - name: ‚öôÔ∏è Build backend
        working-directory: brainbytes-multi-container/backend
        run: |
          npm install
          npm run build || echo "‚ö†Ô∏è No backend build script defined"

      - name: üê≥ Check Docker Versions
        run: |
          docker --version
          docker compose version
        
      - name: üìù Generate .env from secrets
        working-directory: brainbytes-multi-container
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "HUGGINGFACE_TOKEN=${{ secrets.HUGGINGFACE_TOKEN }}" >> .env
          echo "PORT=4000" >> .env
          echo "HF_API_KEY=${{ secrets.HF_API_KEY }}" >> .env

      - name: üê≥ Start Docker Compose
        working-directory: brainbytes-multi-container
        run: |
          docker compose up -d --build
          sleep 20

      - name: üßæ Debug Backend Logs (Full)
        working-directory: brainbytes-multi-container
        run: |
          docker compose ps
          docker compose logs backend
          docker compose exec backend cat server.js || true

      - name: üß≠ Install Playwright Browsers
        working-directory: brainbytes-multi-container/e2e-tests
        run: npx playwright install --with-deps

      - name: ‚úÖ Check Backend Health (inside container)
        working-directory: brainbytes-multi-container
        run: |
          for i in {1..15}; do
            echo "Attempt $i: Checking backend (from inside container)..."
            if docker compose exec backend curl --fail http://localhost:10000/health; then
              echo "‚úÖ Backend is ready"
              exit 0
            fi
            sleep 5
          done
          echo "‚ùå Backend did not become ready in time"
          docker compose logs backend
          exit 1

      - name: ‚úÖ Check Frontend+Backend Health (via exposed port)
        working-directory: brainbytes-multi-container
        run: |
          for i in {1..10}; do
            echo "Attempt $i: Checking fullstack health at http://localhost:4001..."
            if curl --fail http://localhost:4001/health; then
              echo "‚úÖ Frontend+Backend is healthy"
              exit 0
            fi
            sleep 5
          done
          echo "‚ùå Health check failed"
          docker compose logs
          exit 1


      - name: Run E2E tests
        working-directory: brainbytes-multi-container/e2e-tests
        run: npm install && npm run test:e2e

      - name: üßπ Tear Down Docker
        working-directory: brainbytes-multi-container
        run: docker compose down

  